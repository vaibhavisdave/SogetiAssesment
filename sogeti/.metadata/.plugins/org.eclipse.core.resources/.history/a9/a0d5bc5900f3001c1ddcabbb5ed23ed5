/**
 * 
 */
package com.sogeti.asses.leaseCompany.SogetiAssesmentLeaseCompany.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.entity.Car;
import com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.service.LeaseCompanyService;

/**
 * @author vighn
 *
 */
@SpringBootTest(classes = {com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.SogetiAssesmentLeaseCompanyApplication.class})
@AutoConfigureMockMvc
public class LeaseCompanyControllerTest {
	@MockBean
	LeaseCompanyService service;
	
	@Autowired
	MockMvc mvc;
	
	@Autowired
	  private ObjectMapper objectMapper;
	
	@Test
	void testCreate() throws JsonProcessingException, Exception  {
		Car car = new Car("Model", "", 0, 4, "", 100.00, 1000, 50, 6, "", 0.8, 0);
		car.setLeaseRate();
		when(service.create(car)).thenReturn(1l);
		mvc.perform(post("/add").contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(car)))
		.andExpect(result ->{
			MockMvcResultMatchers.status().is(200);
			MockMvcResultMatchers.jsonPath("$.data").value(1);
		} );
	}
	
	@Test
	void testUpdate() throws JsonProcessingException, Exception  {
		Car car = new Car("Model", "", 0, 4, "", 100.00, 1000, 50, 6, "", 0.8, 0);
		car.setId(1l);
		car.setLeaseRate();
		when(service.update(car,1)).thenReturn(car);
		mvc.perform(post("/update").contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(car)))
				.andExpect(result ->{
					MockMvcResultMatchers.status().is(200);
					MockMvcResultMatchers.jsonPath("$.data").value(car);
				} );
	}

}
