/**
 * 
 */
package com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.entity;

import java.sql.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

/**
 * @author vighn
 *
 */
@Data
@Entity
@Table(name = "LEASE")
public class Lease {

	@Id
	@GeneratedValue(strategy  = GenerationType.IDENTITY)
	@Column(name = "id", nullable = false)
	private Long id;
	
	@ApiModelProperty(example = "12", dataType = "Integer", required = true,value = "The number of months in the contract")
	@Column(name = "duration", nullable = false)
	private int duration;
	
	@ApiModelProperty(example = "12-06-2022", dataType = "Date", required = true,value = "Contract's Start Date")
	@Column(name = "startDate", nullable = false)
	private Date startDate;
	
	@ApiModelProperty(example = "0.8", dataType = "Long", required = true,value = "Contract's interest rate")
	@Column(name = "interestRate", nullable = false)
	private long interestRate;
	
	@ApiModelProperty(example = "1000", dataType = "Long", required = true,value = "Contract's lease rate")
	@Column(name = "leaseRate", nullable = false)
	private long leaseRate;
	
	@ApiModelProperty(example = "1000", dataType = "Long", required = true,value = "Car's mileage")
	@OneToOne(cascade = CascadeType.ALL)
	@JsonIgnore
	private Car car;
	
	public Lease(int duration, Date startDate, long interestRate, long leaserate, Car car) {
		super();
		this.duration = duration;
		this.startDate = startDate;
		this.interestRate = interestRate;
		this.leaseRate = leaserate;
		this.car = car;
	}
	
	public Lease() {
		super();
	}	

	public long calculateLeaseRate() {
		
		return ((( car.getMileage() / 12 )*duration )/car.getNettPrice()) + ((( interestRate / 100 ) * car.getNettPrice()) / 12);
	}





}
