package com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.netflix.appinfo.InstanceInfo;
import com.netflix.discovery.EurekaClient;
import com.netflix.discovery.shared.Application;
import com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.dao.LeaseComapnyDao;
import com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.dto.CarDTO;
import com.sogeti.asses.leaseCompany.SogetiAssesLeaseCompany.entity.Car;

@Service
public class LeaseCompanyService {
	
	@Autowired
	LeaseComapnyDao comapnyDao;	

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private EurekaClient eurekaClient;

	public long create(CarDTO carDTO) {
		Car car = new Car(carDTO.getModel(), carDTO.getMake(), carDTO.getVersion(), carDTO.getNoOfDoors(),
				carDTO.getCo2Emission(), carDTO.getGrossPrice(), carDTO.getNettPrice(), carDTO.getMileage(),
				carDTO.getDuration(), carDTO.getStartDate(), carDTO.getInterestRate());
		return comapnyDao.save(car).getId();
	}

	public CarDTO update(Car car, long id) {
		Car oldCar =null;
		Optional<Car> oldCustOpt = comapnyDao.findById(id);
		if(oldCustOpt.isPresent()) {
			oldCar = oldCustOpt.get();
			oldCar.setCo2Emission(car.getCo2Emission());
			oldCar.setGrossPrice(car.getGrossPrice());
			oldCar.setMake(car.getMake());
			oldCar.setMileage(car.getMileage());
			oldCar.setModel(car.getModel());
			oldCar.setNoOfDoors(car.getNoOfDoors());
			oldCar.setVersion(car.getVersion());
			oldCar.setDuration(car.getDuration());
			oldCar.setInterestRate(car.getInterestRate());
			oldCar.setNettPrice(car.getNettPrice());
			oldCar.setLeaseRate();
			oldCar.setStartDate(car.getStartDate());
			oldCar = comapnyDao.save(oldCar);
			
			return CarDTO.builder()
					.co2Emission(oldCar.getCo2Emission())
					.duration(oldCar.getDuration())
					.grossPrice(oldCar.getGrossPrice())
					.id(oldCar.getId())
					.interestRate(oldCar.getInterestRate())
					.leaseRate(oldCar.getLeaseRate())
					.make(oldCar.getMake())
					.mileage(oldCar.getMileage())
					.model(oldCar.getModel())
					.nettPrice(oldCar.getNettPrice())
					.noOfDoors(oldCar.getNoOfDoors())
					.startDate(oldCar.getStartDate())
					.version(oldCar.getVersion())
					.build();
		}
		return null;
	}

	public List<CarDTO> findAll() {
		return comapnyDao.findAll().stream().map(m ->{
			return CarDTO.builder()
					.co2Emission(m.getCo2Emission())
					.duration(m.getDuration())
					.grossPrice(m.getGrossPrice())
					.id(m.getId())
					.interestRate(m.getInterestRate())
					.leaseRate(m.getLeaseRate())
					.make(m.getMake())
					.mileage(m.getMileage())
					.model(m.getModel())
					.nettPrice(m.getNettPrice())
					.noOfDoors(m.getNoOfDoors())
					.startDate(m.getStartDate())
					.version(m.getVersion())
					.build();
		}).toList();
	}

	public Optional<CarDTO> findById(long id) {
		Optional<Car> carOpt =comapnyDao.findById(id);
		if(carOpt.isPresent()) {
			Car car = carOpt.get();
			CarDTO carDTO = CarDTO.builder()
					.co2Emission(car.getCo2Emission())
					.duration(car.getDuration())
					.grossPrice(car.getGrossPrice())
					.id(car.getId())
					.interestRate(car.getInterestRate())
					.leaseRate(car.getLeaseRate())
					.make(car.getMake())
					.mileage(m.getMileage())
					.model(car.getModel())
					.nettPrice(car.getNettPrice())
					.noOfDoors(car.getNoOfDoors())
					.startDate(car.getStartDate())
					.version(car.getVersion())
					.build();
		}
		return Optional.empty();
			
	}

	public void deleteById(long id) {
		comapnyDao.deleteById(id);
	}


	@SuppressWarnings("unchecked")
	public Map<String, String> getCustomers() {
		Map<String, String> map = new HashMap<String, String>();
		Application app = eurekaClient.getApplication("BROKERSERVICE");
		InstanceInfo instance = app.getInstances().get(0);
		String url = "http://" + instance.getIPAddr() + ":" + instance.getPort() + "/find";
		System.out.println(url);
		List cars = restTemplate.getForObject(url, List.class);
		cars.stream().forEach(c ->{
			HashMap<String,Object> cust = (HashMap<String,Object>)c;
			map.put(cust.get("name").toString(),(cust.get("email")).toString());
		});
		return map;
	}
}
